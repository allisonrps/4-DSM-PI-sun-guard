openapi: 3.0.0
info:
  title: SunGuard API
  description: API para gerenciar e consultar dados de sensores UV, temperatura e umidade por data e horas da coleta, além de gerenciar usuários.
  version: 1.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ALLISONRPS/SunGuard_API/1.0.0
  - url: https://sunguard-backend.vercel.app
    description: API do projeto SunGuard
paths:
  /sensors:
    get:
      summary: Retorna todos os dados de sensores com filtros opcionais
      description: |
        Consulta dados de sensores com a possibilidade de aplicar filtros por:
        - Intervalo de datas (`data_inicio` e `data_fim`).
        - Hora específica (`hora`).
        - Valores específicos ou todos os valores de `uv`, `temperatura`, e `umidade`.
        Para os campos `uv`, `temperatura` e `umidade`, se não for informado um valor, retorna todos os registros onde o campo está presente.
      parameters:
        - in: query
          name: data_inicio
          schema:
            type: string
            format: date
          description: Filtra por data de início no formato YYYY-MM-DD.
        - in: query
          name: data_fim
          schema:
            type: string
            format: date
          description: Filtra por data de fim no formato YYYY-MM-DD.
        - in: query
          name: hora
          schema:
            type: string
            pattern: '^\d{2}:\d{2}$'
          description: Filtra por hora no formato HH:MM.
        - in: query
          name: uv
          schema:
            type: number
            nullable: true
          description: Filtra por valor específico de UV. Se não fornecido, retorna todos os registros com `uv`.
        - in: query
          name: temperatura
          schema:
            type: number
            nullable: true
          description: Filtra por valor específico de temperatura. Se não fornecido, retorna todos os registros com `temperatura`.
        - in: query
          name: umidade
          schema:
            type: number
            nullable: true
          description: Filtra por valor específico de umidade. Se não fornecido, retorna todos os registros com `umidade`.
      responses:
        '200':
          description: Lista de dados de sensores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'
        '500':
          description: Erro interno no servidor
    post:
      summary: Cria um novo dado de sensor
      description: Adiciona um novo registro de sensor com dados de UV, temperatura e umidade.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sensor'
      responses:
        '201':
          description: Dado de sensor criado com sucesso!
        '500':
          description: Erro interno no servidor!
    
    delete:
      summary: Exclui um dado de sensor.
      description: Remove um usuário do sistema.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do sensor.
          schema:
            type: string
      responses:
        '204':
          description: Dados de sensores excluído com sucesso.
        '404':
          description: Dados de sensor não encontrado.
        '500':
          description: Erro interno no servidor.
  
  /sensors/updateMany:
    put:
      summary: Atualiza múltiplos registros de sensores
      description: Atualiza registros de sensores com base nos campos `data` e `hora` fornecidos em um array no corpo da requisição.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  data:
                    type: string
                    format: date
                    description: Data do registro a ser atualizado.
                  hora:
                    type: string
                    description: Hora do registro a ser atualizado.
                  temperatura:
                    type: number
                    nullable: true
                    description: Novo valor para a temperatura.
                  umidade:
                    type: number
                    nullable: true
                    description: Novo valor para a umidade.
                  uv:
                    type: number
                    nullable: true
                    description: Novo valor para o índice UV.
              example:
                - data: "2024-11-20"
                  hora: "12:00"
                  temperatura: 25.0
                  umidade: 60
                  uv: 5.1
                - data: "2024-11-20"
                  hora: "13:00"
                  temperatura: 26.0
                  umidade: 55
                  uv: 5.5
      responses:
        '204':
          description: Registros atualizados com sucesso
        '400':
          description: Erro de validação nos dados enviados
        '500':
          description: Erro interno no servidor
  
  
  /usuarios:
    post:
      summary: Cria um novo usuário.
      description: Cadastra um novo usuário no sistema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '201':
          description: Usuário criado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuário criado com sucesso!
                  token:
                    type: string
                    example: jwt_token
        '400':
          description: Requisição inválida.
        '500':
          description: Erro interno do servidor.
    get:
      summary: Lista todos os usuários.
      description: Retorna uma lista de usuários com filtros opcionais.
      responses:
        '200':
          description: Lista de usuários.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
        '500':
          description: Erro interno no servidor.
  /usuarios/{id}:
    get:
      summary: Busca um usuário por ID.
      description: Retorna os detalhes de um usuário específico.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário.
          schema:
            type: string
      responses:
        '200':
          description: Detalhes do usuário.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '404':
          description: Usuário não encontrado.
        '500':
          description: Erro interno no servidor.
    put:
      summary: Atualiza os dados de um usuário.
      description: Atualiza os dados de um usuário específico.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '204':
          description: Usuário atualizado com sucesso.
        '404':
          description: Usuário não encontrado.
        '500':
          description: Erro interno no servidor.
    delete:
      summary: Exclui um usuário.
      description: Remove um usuário do sistema.
      parameters:
        - name: id
          in: path
          required: true
          description: ID do usuário.
          schema:
            type: string
      responses:
        '204':
          description: Usuário excluído com sucesso.
        '404':
          description: Usuário não encontrado.
        '500':
          description: Erro interno no servidor.
components:
  schemas:
    Sensor:
      type: object
      properties:
        _id:
          type: string
          description: ID único do sensor
        data:
          type: string
          format: date-time
          description: Data do registro
        hora:
          type: string
          description: Hora do registro no formato HH:MM
        uv:
          type: number
          nullable: true
          description: Valor de UV
        temperatura:
          type: number
          nullable: true
          description: Valor da temperatura
        umidade:
          type: number
          nullable: true
          description: Valor da umidade
      example:
        _id: "67049ba390e6606216547f61"
        data: "2024-10-01T00:00:00.000Z"
        hora: "00:00"
        uv: 0.0
        temperatura: 18.0
        umidade: 61
    Usuario:
      type: object
      properties:
        nome:
          type: string
          example: João Silva
        fototipo:
          type: string
          example: I
        senha:
          type: string
          example: minhaSenha123
        email:
          type: string
          example: joao@email.com
        data_nascimento:
          type: string
          format: date
          example: 1990-05-15
